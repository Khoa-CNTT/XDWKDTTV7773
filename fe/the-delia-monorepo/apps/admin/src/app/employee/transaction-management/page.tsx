"use client";

import { useState } from "react";
import styles from "./transaction.module.css";
import Sidebar from "@shared/components/Sidebar";
import Header from "@shared/components/Header";
import QRCode from "qrcode";

type Product = {
  name: string;
  quantity: number;
  price: number;
};

type Transaction = {
  id: number;
  customerName: string;
  products: Product[];
  orderCode: string;
  status: "ƒê√É THANH TO√ÅN" | "CH∆ØA THANH TO√ÅN";
  paymentMethod?: string; // <<-- th√™m field m·ªõi ƒë·ªÉ l∆∞u h√¨nh th·ª©c thanh to√°n
  cashierName?: string;
};

export default function TransactionManagementPage() {
  const [searchTerm, setSearchTerm] = useState("");
  const [transactions, setTransactions] = useState<Transaction[]>([
    {
      id: 101010,
      orderCode: "HD10001",
      customerName: "Nguy·ªÖn VƒÉn A",
      products: [
        { name: "Vest nam cao c·∫•p", quantity: 2, price: 2500000 },
        { name: "Qu·∫ßn T√¢y", quantity: 1, price: 700000 },
      ],
      status: "CH∆ØA THANH TO√ÅN",
    },
    {
      id: 201010,
      orderCode: "HD10002",
      customerName: "Tr·∫ßn Th·ªã B",
      products: [{ name: "√Åo d√†i c∆∞·ªõi", quantity: 1, price: 3200000 }],
      status: "ƒê√É THANH TO√ÅN",
      paymentMethod: "Ti·ªÅn m·∫∑t", // <<-- v√≠ d·ª• giao d·ªãch ƒë√£ thanh to√°n r·ªìi
    },
  ]);

  const [notification, setNotification] = useState<string | null>(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [invoiceData, setInvoiceData] = useState({
    customer: "",
    products: [{ name: "", quantity: 1, price: 0 }],
    orderCode: "",
  });
  const [paymentInvoice, setPaymentInvoice] = useState<Transaction | null>(
    null
  );
  const [selectedPaymentMethod, setSelectedPaymentMethod] =
    useState("Ti·ªÅn m·∫∑t");

  const showNotification = (message: string) => {
    setNotification(message);
    setTimeout(() => setNotification(null), 3000);
  };

  const handleStatusChange = (id: number, newStatus: Transaction["status"]) => {
    setTransactions((prev) =>
      prev.map((item) =>
        item.id === id ? { ...item, status: newStatus } : item
      )
    );
  };

  const filteredTransactions = transactions.filter((item) =>
    [item.id.toString(), item.orderCode, item.customerName].some((field) =>
      field.toLowerCase().includes(searchTerm.toLowerCase())
    )
  );

  const handleCreateInvoice = () => {
    const newId = Math.max(...transactions.map((t) => t.id), 0) + 1;
    const newOrderCode = `HD${newId.toString().padStart(5, "0")}`;
    setInvoiceData({
      customer: "",
      products: [{ name: "", quantity: 1, price: 0 }],
      orderCode: newOrderCode,
    });
    setIsModalOpen(true);
  };

  const handleCancel = () => setIsModalOpen(false);

  const handleSave = () => {
    const { customer, products, orderCode } = invoiceData;
    if (
      !customer ||
      products.some((p) => !p.name || p.quantity <= 0 || p.price <= 0)
    ) {
      showNotification("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin h√≥a ƒë∆°n!");
      return;
    }

    const newTransaction: Transaction = {
      id: Math.max(...transactions.map((t) => t.id), 0) + 1,
      orderCode,
      customerName: customer,
      products,
      status: "CH∆ØA THANH TO√ÅN",
    };

    setTransactions((prev) => [...prev, newTransaction]);
    setIsModalOpen(false);
    showNotification("H√≥a ƒë∆°n ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng!");
  };

  const handleConfirmPayment = (id: number) => {
    setTransactions((prev) =>
      prev.map((item) =>
        item.id === id
          ? {
              ...item,
              status: "ƒê√É THANH TO√ÅN",
              paymentMethod: selectedPaymentMethod,
            }
          : item
      )
    );
    setPaymentInvoice(null);
    showNotification("Thanh to√°n th√†nh c√¥ng!");
  };

const handlePrintInvoice = async (transaction: Transaction) => {
  const printWindow = window.open("", "_blank");
  if (!printWindow) return;

  const qrData = `https://your-store-link.com/review?order=${transaction.orderCode}`;
  const qrCodeDataUrl = await QRCode.toDataURL(qrData);

  const html = `
    <html>
      <head>
        <title>H√≥a ƒê∆°n - THE DELIA</title>
        <style>
          body { font-family: Arial; padding: 20px; }
          .store-info { text-align: center; margin-bottom: 20px; }
          .invoice-title { font-size: 24px; font-weight: bold; margin: 10px 0; text-align: center; }
          table { width: 100%; border-collapse: collapse; margin-top: 20px; }
          th, td { border: 1px solid #ccc; padding: 8px; text-align: center; }
          .total { text-align: right; margin-top: 20px; font-size: 18px; }
          .qr { margin-top: 30px; text-align: center; }
          .cashier-info { margin-top: 20px; text-align: left; }
          @media print { .print-button { display: none; } }
        </style>
      </head>
      <body>
        <div class="store-info">
          <div><strong>THE DELIA</strong></div>
          <div>ƒê·ªãa ch·ªâ: 123 ƒê∆∞·ªùng ABC, Qu·∫≠n 1, TP.HCM</div>
          <div>Hotline: 0123 456 789</div>
        </div>

        <div class="invoice-title">H√ìA ƒê∆†N THANH TO√ÅN</div>

        <div><strong>M√£ ƒë∆°n h√†ng:</strong> ${transaction.orderCode}</div>
        <div><strong>Kh√°ch h√†ng:</strong> ${transaction.customerName}</div>
        <div><strong>Ng√†y:</strong> ${new Date().toLocaleDateString()} - ${new Date().toLocaleTimeString()}</div>
        <div><strong>H√¨nh th·ª©c thanh to√°n:</strong> ${transaction.paymentMethod || "Ch∆∞a x√°c ƒë·ªãnh"}</div>

        <!-- Nh√¢n vi√™n thu ng√¢n -->
        <div class="cashier-info">
          <strong>Nh√¢n vi√™n thu ng√¢n:</strong> ${transaction.cashierName || "Ch∆∞a c√≥ t√™n nh√¢n vi√™n"}
        </div>

        <table>
          <thead>
            <tr>
              <th>S·∫£n ph·∫©m</th>
              <th>S·ªë l∆∞·ª£ng</th>
              <th>ƒê∆°n gi√°</th>
              <th>Th√†nh ti·ªÅn</th>
            </tr>
          </thead>
          <tbody>
            ${transaction.products
              .map(
                (p) => `
              <tr>
                <td>${p.name}</td>
                <td>${p.quantity}</td>
                <td>${p.price.toLocaleString()}‚Ç´</td>
                <td>${(p.quantity * p.price).toLocaleString()}‚Ç´</td>
              </tr>
            `
              )
              .join("")}
          </tbody>
        </table>

        <div class="total">
          <strong>T·ªïng c·ªông: </strong>
          ${transaction.products.reduce((sum, p) => sum + p.price * p.quantity, 0).toLocaleString()}‚Ç´
        </div>

        <div class="qr">
          <img src="${qrCodeDataUrl}" width="120" height="120" alt="QR Code" />
          <p>Qu√©t m√£ ƒë·ªÉ ƒë√°nh gi√° c·ª≠a h√†ng</p>
        </div>

        <div class="print-button" onclick="window.print(); this.style.display='none'">üñ®Ô∏è In h√≥a ƒë∆°n</div>
      </body>
    </html>
  `;

  printWindow.document.open();
  printWindow.document.write(html);
  printWindow.document.close();
};

  return (
    <div className={styles.container}>
      <Header />
      <Sidebar />

      <div className={styles.content}>
        <h1 className={styles.title}>Qu·∫£n L√Ω Giao D·ªãch</h1>

        <button
          className={styles.createInvoiceBtn}
          onClick={handleCreateInvoice}
        >
          +T·∫°o H√≥a ƒê∆°n M·ªõi
        </button>

        {notification && (
          <div className={styles.notification}>{notification}</div>
        )}

        <div className={styles.actionBar}>
          <input
            type="text"
            placeholder="T√¨m theo ID, m√£ ƒë∆°n h√†ng ho·∫∑c kh√°ch h√†ng"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className={styles.searchInput}
          />
        </div>

        <table className={styles.table}>
          <thead>
            <tr>
              <th>ID</th>
              <th>M√É ƒê∆†N H√ÄNG</th>
              <th>KH√ÅCH H√ÄNG</th>
              <th>S·∫¢N PH·∫®M</th>
              <th>S·ªê L∆Ø·ª¢NG</th>
              <th>T·ªîNG TI·ªÄN</th>
              <th>TR·∫†NG TH√ÅI</th>
              <th>THAO T√ÅC</th>
            </tr>
          </thead>
          <tbody>
            {filteredTransactions.map((item) => (
              <tr key={item.id}>
                <td>{item.id}</td>
                <td>{item.orderCode}</td>
                <td>{item.customerName}</td>
                <td>
                  {item.products.map((p, idx) => (
                    <div key={idx}>{p.name}</div>
                  ))}
                </td>
                <td>{item.products.reduce((sum, p) => sum + p.quantity, 0)}</td>
                <td>
                  {item.products
                    .reduce((sum, p) => sum + p.price * p.quantity, 0)
                    .toLocaleString()}
                  ‚Ç´
                </td>
                <td>
                  <select
                    value={item.status}
                    onChange={(e) =>
                      handleStatusChange(
                        item.id,
                        e.target.value as Transaction["status"]
                      )
                    }
                    className={styles.statusDropdown}
                  >
                    <option value="ƒê√É THANH TO√ÅN">ƒê√É THANH TO√ÅN</option>
                    <option value="CH∆ØA THANH TO√ÅN">CH∆ØA THANH TO√ÅN</option>
                  </select>
                </td>
                <td>
                  <button
                    className={styles.contactBtn}
                    onClick={() =>
                      alert(`Li√™n h·ªá kh√°ch h√†ng: ${item.customerName}`)
                    }
                  >
                    Li√™n h·ªá
                  </button>
                  {item.status === "CH∆ØA THANH TO√ÅN" && (
                    <button
                      className={styles.paymentBtn}
                      onClick={() => setPaymentInvoice(item)}
                    >
                      Thanh to√°n
                    </button>
                  )}
                  <button
                    className={styles.printBtn}
                    onClick={() => handlePrintInvoice(item)}
                  >
                    In h√≥a ƒë∆°n
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>

        {/* Modal t·∫°o h√≥a ƒë∆°n */}
        {isModalOpen && (
          <div className={styles.modal}>
            <div className={styles.modalContent}>
              <h2>T·∫°o H√≥a ƒê∆°n</h2>

              <div className={styles.formGroup}>
                <label>M√£ ƒê∆°n H√†ng</label>
                <input type="text" value={invoiceData.orderCode} disabled />
              </div>

              <div className={styles.formGroup}>
                <label>Kh√°ch H√†ng</label>
                <input
                  type="text"
                  value={invoiceData.customer}
                  onChange={(e) =>
                    setInvoiceData({ ...invoiceData, customer: e.target.value })
                  }
                />
              </div>

              <div className={styles.formGroup}>
                <label>S·∫£n Ph·∫©m</label>
                <input
                  type="text"
                  value={invoiceData.products[0].name}
                  onChange={(e) =>
                    setInvoiceData({
                      ...invoiceData,
                      products: [
                        { ...invoiceData.products[0], name: e.target.value },
                      ],
                    })
                  }
                />
              </div>

              <div className={styles.formGroup}>
                <label>S·ªë L∆∞·ª£ng</label>
                <input
                  type="number"
                  value={invoiceData.products[0].quantity}
                  onChange={(e) =>
                    setInvoiceData({
                      ...invoiceData,
                      products: [
                        {
                          ...invoiceData.products[0],
                          quantity: +e.target.value,
                        },
                      ],
                    })
                  }
                />
              </div>

              <div className={styles.formGroup}>
                <label>ƒê∆°n Gi√°</label>
                <input
                  type="number"
                  value={invoiceData.products[0].price}
                  onChange={(e) =>
                    setInvoiceData({
                      ...invoiceData,
                      products: [
                        { ...invoiceData.products[0], price: +e.target.value },
                      ],
                    })
                  }
                />
                <span>VNƒê</span>
              </div>

              <div className={styles.modalActions}>
                <button className={styles.cancelBtn} onClick={handleCancel}>
                  H·ªßy
                </button>
                <button className={styles.saveBtn} onClick={handleSave}>
                  L∆∞u
                </button>
              </div>
            </div>
          </div>
        )}

        {/* Modal Thanh to√°n */}
        {paymentInvoice && (
          <div className={styles.modal}>
            <div className={styles.invoiceContainer}>
              <h2>üßæ H√ìA ƒê∆†N THANH TO√ÅN</h2>
              <p>
                Ng√†y: {new Date().toLocaleDateString()} -{" "}
                {new Date().toLocaleTimeString()}
              </p>

              <div>
                <strong>M√£ ƒë∆°n h√†ng:</strong> {paymentInvoice.orderCode}
              </div>
              <div>
                <strong>Kh√°ch h√†ng:</strong> {paymentInvoice.customerName}
              </div>

              <div className={styles.formGroup}>
                <label>H√¨nh th·ª©c thanh to√°n</label>
                <select
                  value={selectedPaymentMethod}
                  onChange={(e) => setSelectedPaymentMethod(e.target.value)}
                  className={styles.statusDropdown}
                >
                  <option>Ti·ªÅn m·∫∑t</option>
                  <option>Chuy·ªÉn kho·∫£n</option>
                  <option>QR Pay</option>
                  <option>Th·∫ª ATM</option>
                  <option>Visa/Mastercard</option>
                </select>
              </div>

              <table className={styles.invoiceTable}>
                <thead>
                  <tr>
                    <th>S·∫£n ph·∫©m</th>
                    <th>S·ªë l∆∞·ª£ng</th>
                    <th>ƒê∆°n gi√°</th>
                    <th>Th√†nh ti·ªÅn</th>
                  </tr>
                </thead>
                <tbody>
                  {paymentInvoice.products.map((product, index) => (
                    <tr key={index}>
                      <td>{product.name}</td>
                      <td>{product.quantity}</td>
                      <td>{product.price.toLocaleString()}‚Ç´</td>
                      <td>
                        {(product.price * product.quantity).toLocaleString()}‚Ç´
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>

              <div className={styles.modalActions}>
                <button
                  className={styles.cancelBtn}
                  onClick={() => setPaymentInvoice(null)}
                >
                  H·ªßy
                </button>
                <button
                  className={styles.saveBtn}
                  onClick={() => handleConfirmPayment(paymentInvoice.id)}
                >
                  X√°c nh·∫≠n thanh to√°n
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
