import React, { useState } from "react";
import "./PermissionModal.css";

interface PermissionModalProps {
  isOpen: boolean;
  onClose: () => void;
  accountName: string;
}

const functionList = [
  "Th√™m T√†i Kho·∫£n",
  "Ph√¢n Quy·ªÅn T√†i Kho·∫£n",
  "Kh√≥a/M·ªü T√†i Kho·∫£n Kh√°ch",
  "X√≥a T√†i Kho·∫£n Nh√¢n Vi√™n",
  "Th√™m H√†ng H√≥a Nh·∫≠p",
  "C·∫≠p Nh·∫≠t Tr·∫°ng Th√°i H√†ng",
  "X√≥a H√†ng Trong Kho",
  "Th√™m Danh M·ª•c M·ªõi",
  "Th√™m S·∫£n Ph·∫©m M·ªõi",
  "S·ª≠a S·∫£n Ph·∫©m",
  "X√≥a Danh M·ª•c/S·∫£n Ph·∫©m",
  "T·∫°o H√≥a ƒê∆°n",
  "Thanh To√°n",
  "In H√≥a ƒê∆°n",
  "C·∫≠p Nh·∫≠t Tr·∫°ng Th√°i H√≥a ƒê∆°n",
  "Li√™n H·ªá Mail X√°c Nh·∫≠n Thanh To√°n",
  "Th√™m M·ªõi ƒê∆°n H√†ng",
  "C·∫≠p Nh·∫≠t Tr·∫°ng Th√°i ƒê∆°n H√†ng",
  "Th√™m/X√≥a M√£ Gi·∫£m Gi√°",
  "Xem M√£ Gi·∫£m Gi√°",
];

const PermissionModal: React.FC<PermissionModalProps> = ({
  isOpen,
  onClose,
  accountName,
}) => {
  const [selectedRoles, setSelectedRoles] = useState<
    (null | "Admin" | "Nh√¢n vi√™n")[]
  >(Array(functionList.length).fill(null));

  const [grantedPermissions, setGrantedPermissions] = useState<{
    admin: number[];
    staff: number[];
  }>({
    admin: [],
    staff: [],
  });

  const handleSelectRole = (index: number, role: "Admin" | "Nh√¢n vi√™n") => {
    const updated = [...selectedRoles];
    updated[index] = role;
    setSelectedRoles(updated);
  };

const handleBulkGrant = () => {
  const newAdmin = [...grantedPermissions.admin];
  const newStaff = [...grantedPermissions.staff];

  selectedRoles.forEach((role, index) => {
    if (role === "Admin" && !newAdmin.includes(index)) {
      newAdmin.push(index);
    } else if (role === "Nh√¢n vi√™n" && !newStaff.includes(index)) {
      newStaff.push(index);
    }
  });

  setGrantedPermissions({ admin: newAdmin, staff: newStaff });
  setSelectedRoles(Array(functionList.length).fill(null)); // Reset sau khi c·∫•p
};

  const handleRemovePermission = (
    index: number,
    role: "Admin" | "Nh√¢n vi√™n"
  ) => {
    setGrantedPermissions((prev) => {
      if (role === "Admin") {
        return { ...prev, admin: prev.admin.filter((i) => i !== index) };
      } else {
        return { ...prev, staff: prev.staff.filter((i) => i !== index) };
      }
    });
  };

const handleSavePermissions = async () => {
  // T·∫°o payload ri√™ng cho quy·ªÅn c·ªßa Admin v√† Nh√¢n vi√™n
  const adminPermissions = grantedPermissions.admin.map((i) => ({
    id: i,
    name: functionList[i],
  }));

  const staffPermissions = grantedPermissions.staff.map((i) => ({
    id: i,
    name: functionList[i],
  }));

  const payload = {
    accountName,
    permissions: {
      admin: adminPermissions, // Quy·ªÅn c·ªßa Admin
      staff: staffPermissions, // Quy·ªÅn c·ªßa Nh√¢n vi√™n
    },
  };

  console.log("üöÄ Quy·ªÅn s·∫Ω l∆∞u v√†o DB:", payload);

  // G·ªçi API ƒë·ªÉ l∆∞u quy·ªÅn (comment n·∫øu kh√¥ng d√πng th·ª±c t·∫ø)
  try {
    await fetch("/api/permissions", {
      method: "POST",
      body: JSON.stringify(payload),
      headers: { "Content-Type": "application/json" },
    });

    // ƒê√≥ng modal sau khi l∆∞u th√†nh c√¥ng
    onClose();

    // Reset d·ªØ li·ªáu quy·ªÅn sau khi l∆∞u th√†nh c√¥ng
    setGrantedPermissions({ admin: [], staff: [] });
    setSelectedRoles(Array(functionList.length).fill(null)); // Reset quy·ªÅn ƒë√£ ch·ªçn
  } catch (error) {
    console.error("L·ªói khi l∆∞u quy·ªÅn:", error);
    // C√≥ th·ªÉ th√¥ng b√°o l·ªói cho ng∆∞·ªùi d√πng n·∫øu c·∫ßn
  }
};


  if (!isOpen) return null;

  return (
    <div className="permission-modal-overlay">
      <div className="permission-modal">
        <div className="permission-header">
          <h2>Ph√¢n Quy·ªÅn {accountName}</h2>
          <button className="grant-all-btn" onClick={handleBulkGrant}>
            C·∫•p quy·ªÅn
          </button>
        </div>

        <table className="permission-table">
          <thead>
            <tr>
              <th>Danh s√°ch ch·ª©c nƒÉng</th>
              <th className="assign-header">Ph√¢n Quy·ªÅn Cho</th>
              <th className="role-column">Admin</th>
              <th className="role-column">Nh√¢n vi√™n</th>
            </tr>
          </thead>
          <tbody>
            {functionList.map((funcName, i) => (
              <tr key={i}>
                <td>
                  {i + 1}. {funcName}
                </td>
                <td>
                  <label>
                    <input
                      type="radio"
                      name={`role-${i}`}
                      value="Admin"
                      checked={selectedRoles[i] === "Admin"}
                      onChange={() => handleSelectRole(i, "Admin")}
                    />{" "}
                    Admin
                  </label>
                  <label style={{ marginLeft: "8px" }}>
                    <input
                      type="radio"
                      name={`role-${i}`}
                      value="Nh√¢n vi√™n"
                      checked={selectedRoles[i] === "Nh√¢n vi√™n"}
                      onChange={() => handleSelectRole(i, "Nh√¢n vi√™n")}
                    />{" "}
                    Nh√¢n vi√™n
                  </label>
                </td>
                <td>
                  {grantedPermissions.admin.includes(i) && (
                    <span className="granted-badge admin">
                      ‚úî Quy·ªÅn n√†y d√†nh cho <b>account Admin</b>
                      <button
                        className="remove-btn"
                        onClick={() => handleRemovePermission(i, "Admin")}
                      >
                        Xo√°
                      </button>
                    </span>
                  )}
                </td>
                <td>
                  {grantedPermissions.staff.includes(i) && (
                    <span className="granted-badge staff">
                      ‚úî Quy·ªÅn n√†y d√†nh cho <b>account Nh√¢n vi√™n</b>
                      <button
                        className="remove-btn"
                        onClick={() => handleRemovePermission(i, "Nh√¢n vi√™n")}
                      >
                        Xo√°
                      </button>
                    </span>
                  )}
                </td>
              </tr>
            ))}
          </tbody>
        </table>

        <div className="modal-footer">
          <button className="cancel-btn" onClick={onClose}>
            Hu·ª∑
          </button>
          <button className="save-btn" onClick={handleSavePermissions}>
            L∆∞u
          </button>
        </div>
      </div>
    </div>
  );
};

export default PermissionModal;
