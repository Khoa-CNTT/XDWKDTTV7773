import { getMessages, getTranslations } from "next-intl/server";
import HeaderWrapper from "../../../../components/HeaderWrapper";
import Footer from "../../../../components/Footer";
import SocialIcons from "../../../../components/SocialIcons";
import styles from "../../../ProductDetail.module.css";
import Image from "next/image";
import Link from "next/link";

type Subcategory = "dem-troi-sao" | "tam-hon-cua-trai-dat";

type Product = {
  id: number;
  name: string;
  image: string;
  price: number;
  description?: string;
  material?: string;
  colors?: string[];
  sizes?: string[];
  images?: string[];
};

const products: Record<Subcategory, Product[]> = {
  "dem-troi-sao": [
    {
      id: 5,
      name: "B·ªô 2 m·∫£nh thun kim tuy·∫øn sang tr·ªçng",
      image: "/images/starry-dress-1.jpg",
      price: 4480000,
      description: "B·ªô 2 m·∫£nh thun kim tuy·∫øn sang tr·ªçng, ph√π h·ª£p cho c√°c b·ªØa ti·ªác t·ªëi ho·∫∑c s·ª± ki·ªán ƒë·∫∑c bi·ªát.",
      material: "Thun kim tuy·∫øn",
      colors: ["ƒêen √°nh kim"],
      sizes: ["S", "M", "L"],
      images: ["/images/starry-dress-1.jpg"],
    },
    {
      id: 6,
      name: "ƒê·∫ßm x·∫ª v·∫°t v·∫£i l·ª•a",
      image: "/images/starry-dress-2.jpg",
      price: 3220000,
      description: "ƒê·∫ßm x·∫ª v·∫°t v·∫£i l·ª•a m·ªÅm m·∫°i, thi·∫øt k·∫ø thanh l·ªãch v√† hi·ªán ƒë·∫°i.",
      material: "V·∫£i l·ª•a",
      colors: ["Tr·∫Øng ng·ªçc trai"],
      sizes: ["S", "M", "L"],
      images: ["/images/starry-dress-2.jpg"],
    },
  ],
  "tam-hon-cua-trai-dat": [
    {
      id: 7,
      name: "B·ªô suit 100% v·∫£i len nh·∫π",
      image: "/images/starry-dress-3.jpg",
      price: 6660000,
      description: "B·ªô suit 2 m·∫£nh v·ªõi ch·∫•t li·ªáu v·∫£i 100% len m·ªÅm m·∫°i, thi·∫øt k·∫ø v√°y c·ª±c d√†i b√≥ng b·ªÅn v√† jacket √¥m s√°t c∆° th·ªÉ, k·∫øt h·ª£p √°o corset b√™n trong l√†m t·ªët l√™n s·ª± tinh t·∫ø v√† phong c√°ch hi·ªán ƒë·∫°i.",
      material: "V·∫£i",
      colors: ["Light Grey", "Dark Grey"],
      sizes: ["XXS", "XS", "S", "M", "L", "XL", "XXL"],
      images: [
        "/images/starry-dress-3.jpg",
        "/images/starry-dress-3-side.jpg",
        "/images/starry-dress-3-back.jpg",
        "/images/starry-dress-3-detail.jpg",
      ],
    },
    {
      id: 8,
      name: "ƒê·∫ßm l·ªách vai v·∫£i d·∫≠p ch√©o",
      image: "/images/starry-dress-4.jpg",
      price: 2860000,
      description: "ƒê·∫ßm l·ªách vai v·∫£i d·∫≠p ch√©o, thi·∫øt k·∫ø ƒë·ªôc ƒë√°o v√† phong c√°ch.",
      material: "V·∫£i d·∫≠p ch√©o",
      colors: ["Xanh l√°"],
      sizes: ["S", "M", "L"],
      images: ["/images/starry-dress-4.jpg"],
    },
  ],
};

export default async function ProductDetailPage({
  params: { subcategory, id, locale },
}: {
  params: { subcategory: Subcategory; id: string; locale: string };
}) {
  const messages = await getMessages();
  const t = await getTranslations("Product");

  // T√¨m s·∫£n ph·∫©m
  const productId = parseInt(id, 10);
  let product: Product | undefined;

  const subcategoryData = products[subcategory];
  if (!subcategoryData) {
    return <div>{t("productNotFound")}</div>;
  }

  // eslint-disable-next-line prefer-const
  product = subcategoryData.find((p) => p.id === productId);

  if (!product) {
    return <div>{t("productNotFound")}</div>;
  }

  // Breadcrumb
  const breadcrumb = [
    { label: t("home"), href: "/" },
    { label: t("shop"), href: "/mua-sam" },
    { label: t("newArrivalsTitle"), href: `/mua-sam/hang-moi` },
    { label: subcategory === "dem-troi-sao" ? "ƒê√™m tr·ªùi sao" : "T√¢m h·ªìn c·ªßa tr√°i ƒë·∫•t", href: `/mua-sam/hang-moi/${subcategory}` },
    { label: product.name, href: null },
  ];

  return (
    <div className={styles.container}>
      <HeaderWrapper messages={messages} locale={locale} />
      <main className={styles.main}>
        <nav className={styles.breadcrumb}>
          {breadcrumb.map((item, index) => (
            <span key={index}>
              {item.href ? (
                <Link href={item.href} className={styles.breadcrumbLink}>
                  {item.label}
                </Link>
              ) : (
                <span className={styles.breadcrumbCurrent}>{item.label}</span>
              )}
              {index < breadcrumb.length - 1 && " > "}
            </span>
          ))}
        </nav>

        <div className={styles.productDetail}>
          <div className={styles.imagesSection}>
            <div className={styles.thumbnailList}>
              {(product.images || [product.image]).map((img, index) => (
                <div key={index} className={styles.thumbnail}>
                  <Image src={img} alt={`${product.name} thumbnail ${index + 1}`} width={80} height={120} className={styles.thumbnailImage} />
                </div>
              ))}
            </div>
            <div className={styles.mainImageWrapper}>
              <div className={styles.mainImage}>
                <Image src={product.image} alt={product.name} width={500} height={700} className={styles.mainImageContent} />
              </div>
              {(product.images || []).slice(1, 4).map((img, index) => (
                <div key={index} className={`${styles.backgroundImage} ${styles[`backgroundImage${index + 1}`]}`}>
                  <Image src={img} alt={`${product.name} background ${index + 1}`} width={200} height={300} className={styles.backgroundImageContent} />
                </div>
              ))}
            </div>
          </div>

          <div className={styles.infoSection}>
            <h1 className={styles.productName}>{product.name}</h1>
            <p className={styles.productPrice}>{product.price.toLocaleString("vi-VN")} ƒë</p>
            <div className={styles.favorite}>
              <span className={styles.heartIcon}>‚ù§Ô∏è</span> 9
            </div>

            <div className={styles.productAttribute}>
              <span className={styles.label}>{t("material")}:</span>
              <span>{product.material || "N/A"}</span>
            </div>

            <div className={styles.productAttribute}>
              <span className={styles.label}>{t("color")}:</span>
              <div className={styles.colorOptions}>
                {(product.colors || []).map((color, index) => (
                  <div
                    key={index}
                    className={styles.colorSwatch}
                    style={{
                      backgroundColor:
                        color.toLowerCase() === "ƒëen" ? "#000000" :
                        color.toLowerCase() === "x√°m ƒë·∫≠m" ? "#4a4a4a" :
                        color.toLowerCase() === "x√°m nh·∫°t" ? "#d3d3d3" :
                        color.toLowerCase() === "tr·∫Øng" ? "#ffffff" :
                        color.toLowerCase() === "xanh navy" ? "#1a2526" :
                        color.toLowerCase() === "ƒë·ªè r∆∞·ª£u" ? "#5f0000" :
                        color.toLowerCase() === "tr·∫Øng ng·ªçc trai" ? "#f0f0f0" :
                        color.toLowerCase() === "ƒëen √°nh kim" ? "#1c2526" :
                        color.toLowerCase() === "xanh l√°" ? "#2e8b57" :
                        color.toLowerCase() === "h·ªìng" ? "#ff69b4" :
                        color.toLowerCase() === "ƒë·ªè" ? "#ff0000" :
                        color.toLowerCase() === "v√†ng" ? "#ffd700" :
                        color.toLowerCase() === "b·∫°c" ? "#c0c0c0" :
                        color.toLowerCase() === "be" ? "#f5f5dc" :
                        color.toLowerCase() === "xanh d∆∞∆°ng" ? "#4682b4" :
                        color.toLowerCase() === "h·ªìng ph·∫•n" ? "#ffb6c1" :
                        color.toLowerCase() === "v√†ng √°nh kim" ? "#b8860b" :
                        color.toLowerCase() === "t√≠m" ? "#800080" :
                        color.toLowerCase(),
                    }}
                  ></div>
                ))}
              </div>
            </div>

            <div className={styles.productAttribute}>
              <span className={styles.label}>{t("size")}:</span>
              <div className={styles.sizeOptions}>
                {(product.sizes || []).map((size, index) => (
                  <button key={index} className={styles.sizeButton}>
                    {size}
                  </button>
                ))}
              </div>
              <Link href="#" className={styles.sizeGuideLink}>
                {t("sizeGuide")}
              </Link>
            </div>

            <div className={styles.madeToMeasure}>
              <button className={styles.madeToMeasureButton}>{t("madeToMeasure")}</button>
            </div>

            <div className={styles.quantity}>
              <span className={styles.label}>{t("quantity")}:</span>
              <div className={styles.quantitySelector}>
                <button className={styles.quantityButton}>-</button>
                <input type="number" value="1" min="1" className={styles.quantityInput} readOnly />
                <button className={styles.quantityButton}>+</button>
              </div>
            </div>

            <button className={styles.addToCartButton}>
              <span className={styles.cartIcon}>üõí</span> {t("addToCart")}
            </button>
          </div>
        </div>

        <div className={styles.descriptionSection}>
          <h2 className={styles.descriptionTitle}>{t("description")}</h2>
          <p className={styles.descriptionContent}>{product.description || "Kh√¥ng c√≥ m√¥ t·∫£."}</p>
        </div>
      </main>
      <SocialIcons />
      <Footer />
    </div>
  );
}