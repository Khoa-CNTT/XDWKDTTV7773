"use client";
import React, { useState } from "react";
import styles from "./page.module.css";
import Sidebar from "@shared/components/Sidebar";
import Header from "@shared/components/Header";

interface Account {
  id: number;
  name: string;
  email: string;
  phone: string;
  role: "ADMIN" | "NH√ÇN VI√äN";
  status: "Ho·∫°t ƒë·ªông" | "Ngh·ªâ vi·ªác";
}

const AccountManagementPage = () => {
  const [accounts, setAccounts] = useState<Account[]>([
    {
      id: 1,
      name: "Nguy·ªÖn VƒÉn A",
      email: "admin@example.com",
      phone: "0909123456",
      role: "ADMIN",
      status: "Ho·∫°t ƒë·ªông",
    },
    {
      id: 2,
      name: "Tr·∫ßn Th·ªã B",
      email: "nv1@example.com",
      phone: "0987654321",
      role: "NH√ÇN VI√äN",
      status: "Ngh·ªâ vi·ªác",
    },
  ]);

  const [showEditForm, setShowEditForm] = useState(false);
  const [editAccount, setEditAccount] = useState<Account | null>(null);
  const [showPermissionModal, setShowPermissionModal] = useState(false);
  const [permissions, setPermissions] = useState<{ [key: string]: string[] }>({
    ADMIN: [],
    "NH√ÇN VI√äN": [],
  });
  const [selectedRole, setSelectedRole] = useState("");

  const permissionList = [
    "Th√™m T√†i Kho·∫£n",
    "Ph√¢n Quy·ªÅn T√†i Kho·∫£n",
    "Kh√≥a/M·ªü T√†i Kho·∫£n Kh√°ch",
    "X√≥a T√†i Kho·∫£n Nh√¢n Vi√™n",
    "Th√™m H√†ng H√≥a Nh·∫≠p",
    "C·∫≠p Nh·∫≠t Tr·∫°ng Th√°i H√†ng",
    "X√≥a H√†ng Trong Kho",
    "Th√™m Danh M·ª•c M·ªõi",
    "Th√™m S·∫£n Ph·∫©m M·ªõi",
    "S·ª≠a S·∫£n Ph·∫©m",
  ];

  const handleEdit = (account: Account) => {
    setEditAccount(account);
    setShowEditForm(true);
  };

  const handleUpdate = () => {
    if (editAccount) {
      const updatedAccounts = accounts.map((acc) =>
        acc.id === editAccount.id ? editAccount : acc
      );
      setAccounts(updatedAccounts);
      setShowEditForm(false);
      alert("‚úÖ C·∫≠p nh·∫≠t t√†i kho·∫£n th√†nh c√¥ng!");
    }
  };

  const handleOpenPermissionModal = () => {
    setShowPermissionModal(true);
  };

  const assignPermission = (func: string, role: string) => {
    if (!role) return alert("‚ö†Ô∏è Vui l√≤ng ch·ªçn vai tr√≤!");
    setPermissions((prev) => ({
      ...prev,
      [role]: [...new Set([...prev[role], func])],
    }));
  };

  const removePermission = (func: string, role: string) => {
    setPermissions((prev) => ({
      ...prev,
      [role]: prev[role].filter((f) => f !== func),
    }));
  };
  
  return (
    <div className={styles.container}>

      <Sidebar />
      <div className={styles.content}>
        <Header />
        <h1>Qu·∫£n l√Ω t√†i kho·∫£n</h1>
        <button
          className={styles.addButton}
          onClick={() => alert("üõ† T√≠nh nƒÉng th√™m ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn")}
        >
          + Th√™m
        </button>
        <table className={styles.table}>
          <thead>
            <tr>
              <th>ID</th>
              <th>H·ªç t√™n</th>
              <th>Email</th>
              <th>S·ªë ƒëi·ªán tho·∫°i</th>
              <th>Vai tr√≤</th>
              <th>Tr·∫°ng th√°i</th>
              <th>H√†nh ƒë·ªông</th>
            </tr>
          </thead>
          <tbody>
            {accounts.map((acc) => (
              <tr key={acc.id}>
                <td>{acc.id}</td>
                <td>{acc.name}</td>
                <td>{acc.email}</td>
                <td>{acc.phone}</td>
                <td>{acc.role}</td>
                <td>{acc.status}</td>
                <td>
                  <button onClick={() => handleEdit(acc)}>C·∫≠p nh·∫≠t</button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>

        {showEditForm && editAccount && (
          <div className={styles.modal}>
            <h2>C·∫≠p nh·∫≠t t√†i kho·∫£n</h2>
            <label>H·ªç t√™n</label>
            <input
              type="text"
              value={editAccount.name}
              onChange={(e) =>
                setEditAccount({ ...editAccount, name: e.target.value })
              }
            />
            <label>Email</label>
            <input
              type="email"
              value={editAccount.email}
              onChange={(e) =>
                setEditAccount({ ...editAccount, email: e.target.value })
              }
            />
            <label>S·ªë ƒëi·ªán tho·∫°i</label>
            <input
              type="text"
              value={editAccount.phone}
              onChange={(e) =>
                setEditAccount({ ...editAccount, phone: e.target.value })
              }
            />
            <label>Vai tr√≤</label>
            <select
              value={editAccount.role}
              onChange={(e) =>
                setEditAccount({
                  ...editAccount,
                  role: e.target.value as "NH√ÇN VI√äN" | "ADMIN",
                })
              }
            >
              <option value="ADMIN">ADMIN</option>
              <option value="NH√ÇN VI√äN">NH√ÇN VI√äN</option>
            </select>
            <label>Tr·∫°ng th√°i</label>
            <select
              value={editAccount.status}
              onChange={(e) =>
                setEditAccount({
                  ...editAccount,
                  status: e.target.value as "Ho·∫°t ƒë·ªông" | "Ngh·ªâ vi·ªác",
                })
              }
            >
              <option value="Ho·∫°t ƒë·ªông">Ho·∫°t ƒë·ªông</option>
              <option value="Ngh·ªâ vi·ªác">Ngh·ªâ vi·ªác</option>
            </select>
            <div className={styles.modalFooter}>
              <button
                className={styles.cancelBtn}
                onClick={() => setShowEditForm(false)}
              >
                H·ªßy
              </button>
              <button className={styles.submitBtn} onClick={handleUpdate}>
                L∆∞u
              </button>
              <button
                className={styles.permissionBtn}
                onClick={handleOpenPermissionModal}
              >
                Ph√¢n quy·ªÅn
              </button>
            </div>
          </div>
        )}

        {showPermissionModal && (
          <div className={styles.permissionModal}>
            <h2>Ph√¢n Quy·ªÅn</h2>
            <div className={styles.permissionTable}>
              <div className={styles.permissionColumn}>
                <strong>Danh s√°ch ch·ª©c nƒÉng</strong>
                {permissionList.map((func, idx) => (
                  <div key={idx} className={styles.permissionItem}>
                    <span>
                      {idx + 1}. {func}
                    </span>
                    <div className={styles.permissionRadio}>
                      <label>
                        <input
                          type="radio"
                          name={`role-${idx}`}
                          value="ADMIN"
                          onChange={(e) => setSelectedRole(e.target.value)}
                        />
                        ADMIN
                      </label>
                      <label>
                        <input
                          type="radio"
                          name={`role-${idx}`}
                          value="NH√ÇN VI√äN"
                          onChange={(e) => setSelectedRole(e.target.value)}
                        />
                        NH√ÇN VI√äN
                      </label>
                      <button
                        className={styles.assignBtn}
                        onClick={() => assignPermission(func, selectedRole)}
                      >
                        C·∫•p Quy·ªÅn
                      </button>
                    </div>
                  </div>
                ))}
              </div>

              <div className={styles.permissionColumn}>
                <strong>Danh S√°ch Quy·ªÅn ƒê√£ C·∫•p</strong>
                <div style={{ display: "flex", gap: "20px" }}>
                  {["ADMIN", "NH√ÇN VI√äN"].map((role) => (
                    <div key={role}>
                      <strong>{role}</strong>
                      {permissions[role].map((func, idx) => (
                        <div key={idx} className={styles.permissionItem}>
                          <span>{func}</span>
                          <button
                            className={styles.removeBtn}
                            onClick={() => removePermission(func, role)}
                          >
                            X√≥a Quy·ªÅn
                          </button>
                        </div>
                      ))}
                    </div>
                  ))}
                </div>
              </div>
            </div>
            <div className={styles.modalFooter}>
              <button
                className={styles.cancelBtn}
                onClick={() => setShowPermissionModal(false)}
              >
                ƒê√≥ng
              </button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default AccountManagementPage;
